AWSTemplateFormatVersion: '2010-09-09'
Description: Mermaid to PNG Lambda Function
Parameters:
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket where mmd files will be uploaded
  LambdaFunctionName:
    Type: String
    Description: Name of the Lambda function that will be created
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
              Resource: arn:aws:s3:::${S3BucketName}/*        
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Description: Converts uploaded mmd files to png images
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          S3_BUCKET: !Ref S3BucketName
      Code:
        ZipFile: |
          import json
          import boto3
          import tempfile
          import subprocess
          import logging
          import os

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          s3 = boto3.client('s3')

          def install_dependencies(scope):
              if not(os.path.exists(os.path.join(scope, 'node_modules', 'mermaid.cli', 'index.bundle.js'))):
                  subprocess.check_call(["npm", "install", "mermaid-cli", "imagemagick"])

          def convert_mmd_to_png(input_file, output_file):
              subprocess.check_call(["mmdc", "-i", input_file, "-o", output_file])

          def delete_png(key):
              s3.delete_object(Bucket=os.environ['S3_BUCKET'], Key=key.replace('.mmd', '.png'))

          def lambda_handler(event, context):
              try:
                  install_dependencies(os.environ['LAMBDA_TASK_ROOT'])

                  bucket = event['Records'][0]['s3']['bucket']['name']
                  input_key = event['Records'][0]['s3']['object']['key']

                  if event['Records'][0]['eventName'] == 'ObjectRemoved:Delete':
                      delete_png(input_key)
                      return {
                              "statusCode": 200,
                              "body": json.dumps("Successfully deleted the corresponding .png file.")
                          }

                  if not input_key.endswith('.mmd'):
                      return

                  output_key = input_key.replace('.mmd', '.png')

                  with tempfile.NamedTemporaryFile(suffix=".mmd") as mmd_file:
                      s3.download_file(bucket, input_key, mmd_file.name)

                      with tempfile.NamedTemporaryFile(suffix=".png") as png_file:
                          convert_mmd_to_png(mmd_file.name, png_file.name)
                          s3.upload_file(png_file.name, bucket, output_key)

                  response = {
                      "statusCode": 200,
                      "body": json.dumps("Successfully converted the mmd file to png and stored it in S3"),
                  }

              except Exception as e:
                  logger.exception(f"An error occurred: {e}")
                  response = {
                      "statusCode": 500,
                      "body": json.dumps("An error occurred while processing the .mmd file."),
                  }

              return response
  MermaidToPngBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LambdaFunction.Arn
          - Event: s3:ObjectRemoved:Delete
            Function: !GetAtt LambdaFunction.Arn
